@model ForecastModel
@{
    ViewData[ViewKeys.Title] = "Forecast Tool - Venjix";
    ViewData[ViewKeys.PageHeading] = "Forecast Data";
    ViewData[ViewKeys.PageSubheading] = "Forecast time series data to predict next events.";
}

<vc:header-panel page-heading="@ViewData[ViewKeys.PageHeading]" page-subheading="@ViewData[ViewKeys.PageSubheading]"
                 action="" action-label="" controller="" action-icon=""></vc:header-panel>

<div class="row">
    <div class="col-xxl-3 col-xl-4 col-lg-12">
        <div class="card shadow mb-4" style="min-height:450px">
            <div class="card-body">
                <form>
                    <div class="form-row">
                        <div class="form-group col">
                            <label asp-for="SensorId">Sensor</label>
                            <select class="form-control" asp-for="SensorId" asp-items="Model.Sensors"></select>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label asp-for="SeriesLength">Series length</label>
                            <input type="number" class="form-control" asp-for="SeriesLength">
                        </div>
                        <div class="form-group col">
                            <label asp-for="WindowSize">Window size</label>
                            <input type="number" class="form-control" asp-for="WindowSize">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label asp-for="Horizon">Horizon</label>
                            <input type="number" class="form-control" asp-for="Horizon">
                        </div>
                        <div class="form-group col">
                            <label asp-for="TestSize">Test size</label>
                            <div class="input-group">
                                <input type="number" class="form-control" asp-for="TestSize">
                                <div class="input-group-append">
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                        </div>
                      
                        <div class="form-group col">
                            <label asp-for="ConfidenceLevel">Confidence</label>
                            <div class="input-group">
                                <input type="number" class="form-control" asp-for="ConfidenceLevel">
                                <div class="input-group-append">
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="reportrange">Date range</label>
                        <div class="form-row">
                            <div class="col">
                                <button type="button" class="btn btn-light btn-block btn-sm line-height-normal p-2" id="reportrange">
                                    <i class="mr-2 text-primary" data-feather="calendar"></i>
                                    <span></span>
                                    <i class="ml-1" data-feather="chevron-down"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <button type="button" class="btn btn-success btn-block" id="showButton">
                        <i data-feather="bar-chart"></i> <span class="ml-2 text-xs">Start Forecasting</span>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <div class="col-xxl-9 col-xl-8 col-lg-12">
        <div class="card shadow mb-4" style="min-height:450px">
            <div class="card-body">
                <p id="forecastResult">Run forecast to see results.</p>

                <div>
                    <div id="chart"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModal" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="errorModal">Forecasting Error</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="forecastError">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/moment.js/moment.min.js"></script>
    <script src="~/lib/daterangepicker/daterangepicker.js"></script>
    <script src="~/lib/apexcharts/apexcharts.min.js"></script>
    <script>
        $(function () {
            // ----- Global Data
            var interval = null;

            var start = moment().subtract(29, "days").startOf("day");
            var end = moment().endOf("day");

            var intervals = [];
            var forecasted = [];
            var upperBound = [];
            var lowerBound = [];

            var options = {
                series: [
                    {
                        name: 'Forecasted',
                        data: forecasted
                    },
                    {
                        name: 'Upper bound',
                        data: upperBound
                    },
                    {
                        name: 'Lower bound',
                        data: lowerBound
                    }
                ],
                chart: {
                    id: 'realtime',
                    height: 350,
                    type: 'line'
                },
                dataLabels: {
                    enabled: false
                },
                xaxis: {
                    categories: intervals,
                    tooltip: {
                        enabled: false
                    }
                },
                legend: {
                    show: false
                },
                markers: {
                    size: 4
                },
                tooltip: {
                    x: {
                        formatter: function (value, { series, seriesIndex, dataPointIndex, w }) {
                            return moment(value).format("DD/MM/YYYY hh:mm:ss");
                        }
                    }
                }
            };

            var chart = new ApexCharts(document.querySelector("#chart"), options);
            chart.render();
            
            // ----- Functions
            function fetch_new_data() {
                $('#showButton').attr('disabled', 'disabled');

                const dp = $("#reportrange").data("daterangepicker");
                const d = {
                    sensorId: $('#SensorId option:selected').val(),
                    startDate: dp.startDate,
                    endDate: dp.endDate,
                    seriesLength: $('#SeriesLength').val(),
                    windowSize: $('#WindowSize').val(),
                    horizon: $('#Horizon').val(),
                    testSize: $('#TestSize').val(),
                    confidenceLevel: $('#ConfidenceLevel').val(),
                };

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("ForecastData")",
                    data: JSON.stringify(d),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data, textStatus, jqXHR) {
                        var intervals = data.intervals;
                        var forecasted = data.forecasted;
                        var upperBound = data.upperBound;
                        var lowerBound = data.lowerBound;
                        $("#forecastResult").html(`MAE: ${data.mae}<br>RMSE: ${data.rmse}`);

                        chart.updateOptions({
                            xaxis: {
                                categories: intervals
                            }
                        });
                        chart.updateSeries([
                            {
                                name: 'Forecasted',
                                data: forecasted
                            },
                            {
                                name: 'Upper bound',
                                data: upperBound
                            },
                            {
                                name: 'Lower bound',
                                data: lowerBound
                            }
                        ]);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        $("#forecastError").text(jqXHR.responseJSON.message);
                        $('#errorModal').modal('show')
                    },
                    complete: function () {
                        $('#showButton').removeAttr('disabled');
                    }
                });
            }

            function cb(start, end) {

                $("#startdate").val(start.format("yyyy-MM-DD") + "T00:00:00");
                $("#enddate").val(end.format("yyyy-MM-DD")+ "T23:59:59");
                $("#reportrange span").html(
                    start.format("MMMM D, YYYY") + " - " + end.format("MMMM D, YYYY")
                );
            }

            // ----- Date Range Picker
            $("#reportrange").daterangepicker(
                {
                    startDate: start,
                    endDate: end,
                    ranges: {
                        Today: [moment().startOf("day"), moment().endOf("day")],
                        Yesterday: [
                            moment().subtract(1, "days").startOf("day"),
                            moment().subtract(1, "days").endOf("day"),
                        ],
                        "Last 7 Days": [moment().subtract(6, "days").startOf("day"), moment().endOf("day")],
                        "Last 30 Days": [moment().subtract(29, "days").startOf("day"), moment().endOf("day")],
                        "This Month": [
                            moment().startOf("month"),
                            moment().endOf("month"),
                        ],
                        "Last Month": [
                            moment().subtract(1, "month").startOf("month"),
                            moment().subtract(1, "month").endOf("month"),
                        ],
                    },
                },
                cb
            );

            cb(start, end);

            // ----- Button Handlers
            $("#showButton").on("click", function (e) {
                e.preventDefault();
                fetch_new_data();
            });

            $('#UpdateInterval').on("change", function () {
                if (interval !== null) {
                    clearInterval(interval);
                }

                var selectedInterval = parseInt(this.value);
                if (selectedInterval == 0) return;

                interval = window.setInterval(function () {
                    fetch_new_data();
                }, selectedInterval * 1000);
            });
        });

    </script>
}
